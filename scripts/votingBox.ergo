{
    //Hard-coded constants
    //val managementBoxNftId: Coll[Byte]
    //
    //Registers
    //R4: SigmaProp - Owner's sigmaProp
    //R5: Coll[Coll[Byte]] - PropBytes of PKs that the owner votes for to be added to LETS
    //
    //Transactions
    //
    //Changing votes
    //INPUTS(0) - this box
    //INPUTS(1) - tx fee if needed
    //OUTPUTS(0) - this box with changed R5
    //
    //Adding new user
    //INPUTS(0) - management box
    //INPUTS(1 - n) - voting boxes
    //OUTPUTS(0) - management box
    //OUTPUTS(1) - new user LETS box
    //OUTPUTS(2) - new user voting box
    //OUTPUTS(3 - n+2) - voting boxes


    val sameVoteBox: Boolean = {(outVoteBox: Box)=>
    allOf(Coll(
        SELF.propositionBytes == outVoteBox.propositionBytes,
        SELF.R4[SigmaProp].get == outVoteBox.R4[SigmaProp].get,
        SELF.tokens(0)._1 == outVoteBox.tokens(0)._1
        ))
    }

    val changeVotes: Boolean = OUTPUTS(0).propositionBytes == SELF.propositionBytes
    if (changeVotes)
    {
        //User changes casted votes
        val outVoteBox: Box = OUTPUTS(0)
        val ownerVotes: SigmaProp = SELF.R4[SigmaProp].get && sigmaProp(sameVoteBox(outVoteBox))
        ownerVotes
    }
    else
    {
       //New user is being added to LETS
       val newUserVotingBox = OUTPUTS(2)
       val newUserPkBytes: Coll[Byte] = newUserVotingBox.R4[SigmaProp].get.propBytes
       val isVotingBox: Boolean = newUserVotingBox.tokens(0)._1 == SELF.tokens(0)._1
       val usersVotedFor: Coll[Coll[Byte]] = SELF.R5[Coll[Coll[Byte]]].get
       val votesAfterAddingUser: Coll[Coll[Byte]] = usersVotedFor.filter{(user: Coll[Byte]) => {user != newUserPkBytes}}
       val userBeingAddedInVotes: Boolean = votesAfterAddingUser.size == usersVotedFor.size - 1
       val voteBoxOutputExists: Boolean =
          {
          val selfIndex: Int = INPUTS.indexOf(SELF, 1)
          val out: Box = OUTPUTS(selfIndex + 2)
          if (out.tokens.size > 0 && out.tokens(0) == SELF.tokens(0)){
          allOf(Coll(
            sameVoteBox(out),
            out.R5[Coll[Coll[Byte]]].isDefined && out.R5[Coll[Coll[Byte]]].get == votesAfterAddingUser
          ))
          }
          else false
          }

       val managementBoxIsBeingSpent: Boolean = OUTPUTS(0).tokens(0)._1 == managementBoxNftId
       val voteTakesPlace: SigmaProp = sigmaProp(userBeingAddedInVotes && voteBoxOutputExists && managementBoxIsBeingSpent && isVotingBox)
       voteTakesPlace
    }
}
