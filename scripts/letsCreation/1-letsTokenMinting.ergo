//Box used as input for minting lets tokens. Is created as user together with the management box config box that contains initial values of its registers
//
//Hard-coded variables:
//val votingTokenMintingBoxScriptHash: Coll[Byte]
//
//Tokens
//tokens(0) - management box nft
//
//Registers
//R4-R6 - registers used for minting management box nft
//R7[Coll[[Coll[Byte]]] - proposition bytes of initial users' PKs
//R8[Coll[Byte]] - hash of bytes without ref of config box
//
//Transaction
//INPUTS(0) - self
//OUTPUTS(0) - voting token minting and initial LETS boxes creating box
{
    val votingTokenMintingBox: Box = OUTPUTS(0)
    val correctScript: Boolean = blake2b256(votingTokenMintingBox.propositionBytes) == votingTokenMintingBoxScriptHash
    val managementBoxNftPreserved: Boolean = SELF.tokens(0)._1 == votingTokenMintingBox.tokens(0)._1 && SELF.tokens(0)._2 == 1
    val letsTokensMinted: Boolean = votingTokenMintingBox.tokens(1)._1 == SELF.id
    val letsTokensAmountCorrect: Boolean = votingTokenMintingBox.tokens(1)._2 == 10000000000L
    val initialUsersInfoPreserved: Boolean = SELF.R7[Coll[Coll[Byte]]].get == votingTokenMintingBox.R7[Coll[Coll[Byte]]].get
    val managementConfigBoxInfoPreserved: Boolean = SELF.R8[Coll[Byte]].get == votingTokenMintingBox.R8[Coll[Byte]].get
    sigmaProp(allOf(Coll(
        correctScript,
        managementBoxNftPreserved,
        letsTokensMinted,
        letsTokensAmountCorrect,
        initialUsersInfoPreserved,
        managementConfigBoxInfoPreserved
    )))
}
